import("//buildconfig/c++/c++.gni")
import("//buildconfig/c/c.gni")
import("//buildconfig/platform/platform.gni")
import("//buildconfig/toolchain/toolchain.gni")

config("compiler") {
  include_dirs = []
  defines = []
  cflags = []
  cflags_c = []
  cflags_cc = []
  cflags_objc = []
  cflags_objcc = []
  ldflags = []

  # monorepo
  include_dirs += [ "//" ]

  cflags_c += [ "-std=${std_c}" ]
  cflags_cc += [ "-std=${std_cxx}" ]

  cflags += [ "-O${optimization_level}" ]

  if (warning_level == 0) {
    cflags += [ "-fpermissive" ]
  } else if (warning_level == 1) {
    cflags += [ "-Wall" ]
  } else if (warning_level == 2) {
    cflags += [
      "-Wall",
      "-Wextra",
    ]
  } else if (warning_level == "max" || warning_level == 3) {
    cflags += [
      "-Wall",
      "-Wextra",
      "-Wpedantic",
    ]
  }

  if (use_explicit_symbol_exports) {
    cflags += [ "-fvisibility=hidden" ]
  }

  if (treat_warnings_as_errors) {
    cflags += [ "-Werror" ]
  }

  if (use_static_linking) {
    ldflags += [ "-static" ]
    ldflags += [ "-static-libstdc++" ]
  }

  if (enable_debug_info) {
    cflags += [ "-g" ]
  }
}

config("asan") {
  if (!defined(ldflags)) {
    ldflags = []
  }
  ldflags += [ "-fsanitize=address" ]

  if (!defined(cflags)) {
    cflags = []
  }
  cflags += [
    "-g",
    "-fsanitize=address",
    "-fno-omit-frame-pointer",
  ]
}

config("tsan") {
  if (!defined(ldflags)) {
    ldflags = []
  }
  ldflags += [ "-fsanitize=thread" ]

  if (!defined(cflags)) {
    cflags = []
  }
  cflags += [
    "-g",
    "-fsanitize=thread",
    "-fno-omit-frame-pointer",
  ]
}

config("ubsan") {
  if (!defined(ldflags)) {
    ldflags = []
  }
  ldflags += [ "-fsanitize=undefined" ]

  if (!defined(cflags)) {
    cflags = []
  }
  cflags += [
    "-g",
    "-fsanitize=undefined",
    "-fno-omit-frame-pointer",
  ]
}

config("c") {
}

config("cxx") {
  if (!defined(ldflags)) {
    ldflags = []
  }

  if (!defined(cflags_cc)) {
    cflags_cc = []
  }

  if (!use_exceptions) {
    cflags_cc += [ "-fno-exceptions" ]
  }

  if (!use_rtti) {
    cflags_cc += [ "-fno-rtti" ]
  }
}

config("executable") {
  if (!defined(ldflags)) {
    ldflags = []
  }
  if (!defined(cflags)) {
    cflags = []
  }

  cflags += [ "-fPIE" ]

  if (is_linux) {
    ldflags = [
      # ld.so understands the string $ORIGIN (or equivalently ${ORIGIN}) in an rpath
      # specification (DT_RPATH or DT_RUNPATH) to mean the directory containing the
      # application executable.
      "-Wl,-rpath=\$ORIGIN",
      "-Wl,-rpath-link=\$ORIGIN",
    ]
  }
}

config("shared_library") {
  if (!defined(cflags)) {
    cflags = []
  }

  cflags += [ "-fPIC" ]
}

config("static_libaray") {
}
